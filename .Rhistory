}
if (safe & column %in% c('doc_id')) stop('The doc_id column cannot be set or changed (with safe = T)')
if (!is.null(subset)){
r = eval_subset(private$.meta, subset)
if (!column %in% colnames(private$.meta)) private$.meta[[column]] = NA
private$.meta[[column]][r] = value
} else {
private$.meta[[column]] = value
}
invisible(self)
},
select_meta_columns = function(cnames, clone=self$clone_on_change){
protected_cols = intersect(self$names, c('doc_id'))
if (!any(protected_cols %in% cnames)) stop('selection (cnames) must contain the document id (doc_id)')
if (clone) {
selfclone = self$clone()$select_meta_columns(cnames=cnames, clone=F)
return(selfclone)
}
private$.meta = private$.meta[,cnames,with=F]
invisible(self)
},
set_meta_colname = function(oldname, newname) {
if (oldname %in% c('doc_id','sent_i','word_i')) stop('The position columns (doc_id, sent_i, word_i) cannot be set or changed (with safe = T)')
colnames(private$.meta)[colnames(private$.meta) == oldname] = newname
},
subset = function(subset=NULL, subset_meta=NULL, drop_levels=F, window=NULL, clone=self$clone_on_change){
subset = if (is(substitute(subset), 'call')) deparse(substitute(subset)) else subset
subset_meta = if (is(substitute(subset_meta), 'call')) deparse(substitute(subset_meta)) else subset_meta
if (clone) {
selfclone = self$clone()$subset(subset=subset, subset_meta=subset_meta, drop_levels=drop_levels, window=window, clone=F)
return(selfclone)
}
e = if (is(substitute(subset), 'character')) parse(text=subset) else substitute(subset)
e_meta = if (is(substitute(subset_meta), 'character')) parse(text=subset_meta) else substitute(subset_meta)
## Note that in normal subset the parent.frame is used in eval, to also enable the use of objects from the environment from which subset is called. Here we need to go up 2 levels, since subset is called through the R6 class environment
r_meta = eval(e_meta, private$.meta, parent.frame(2))
if (!is.null(r_meta)) private$select_meta_rows(r_meta) ## also deletes tokens belonging to documents
r = eval(e, private$.data, parent.frame(2))
if (!is.null(r)){
if (!is.null(window)){
global_i = get_global_i(self, max_window_size=window)
global_r = global_i[r]
global_window = rep(global_r, window*2 + 1) + rep(-window:window, each=length(global_r)) ## add window
r = global_i %in% global_window
}
private$select_rows(r) ## also deletes meta documents if all tokens of the document have been deleted
}
if (drop_levels) self$droplevels(clone=F)
private$.meta$doc_id = as.character(private$.meta$doc_id)
invisible(self)
},
reset_feature_index = function(){
private$.feature_index = NULL
private$set_provenance(index_feature=NA, context_level=NA, max_window_size=NA, as_ascii=NA)
},
## FEATURE MANAGEMENT ##
preprocess = function(column, new_column=column, lowercase=T, ngrams=1, ngram_context=c('document', 'sentence'), as_ascii=F, remove_punctuation=T, remove_stopwords=F, use_stemming=F, language='english', clone=self$clone_on_change) {
if (clone) {
selfclone = self$clone()$preprocess(column=column, new_column=new_column, lowercase=lowercase, ngrams=ngrams, ngram_context=ngram_context, as_ascii=as_ascii, remove_punctuation=remove_punctuation, remove_stopwords=remove_stopwords, use_stemming=use_stemming, language=language, clone=F)
return(selfclone)
}
invisible(preprocess_feature(self, column=column, new_column=new_column, lowercase=lowercase, ngrams=ngrams, ngram_context=ngram_context, as_ascii=as_ascii, remove_punctuation=remove_punctuation, remove_stopwords=remove_stopwords, use_stemming=use_stemming, language=language))
},
filter = function(column, new_column, filter, clone=self$clone_on_change){
if (clone) {
selfclone = self$clone()$filter(column=column, new_column=new_column, filter=filter, clone=F)
return(selfclone)
}
invisible(filter_feature(self, column=column, new_column=new_column, filter=filter))
},
feature_stats = function(feature, context_level=c('document','sentence')){
term.statistics(self, feature=feature, context_level=context_level)
},
top_features = function(feature, n=10, group_by=NULL, group_by_meta=NULL, return_long=F){
top_features(self, feature=feature, n=n, group_by=group_by, group_by_meta=group_by_meta, return_long=return_long)
},
## SEARCHING / QUERYING ##
search_features = function(keyword=NA, condition=NA, code=NA, queries=NULL, feature='word', condition_once=F, subset_tokens=NA, subset_meta=NA, keep_false_condition=F, only_last_mword=F, verbose=F){
subset = if (is(substitute(subset), 'call')) deparse(substitute(subset)) else subset
subset_meta = if (is(substitute(subset_meta), 'call')) deparse(substitute(subset_meta)) else subset_meta
search_features(self, keyword=keyword, condition=condition, code=code, queries=queries, feature=feature, condition_once=condition_once, subset_tokens=subset_tokens, subset_meta=subset_meta, keep_false_condition=keep_false_condition, only_last_mword=only_last_mword, verbose=verbose)
},
code_features = function(keyword=NA, condition=NA, code=NA, queries=NULL, feature='word', condition_once=F, subset_tokens=NA, subset_meta=NA, only_last_mword=F, verbose=F, clone=self$clone_on_change){
subset = if (is(substitute(subset), 'call')) deparse(substitute(subset)) else subset
subset_meta = if (is(substitute(subset_meta), 'call')) deparse(substitute(subset_meta)) else subset_meta
if(clone){
selfclone = self$clone()$code_features(keyword=keyword, condition=condition, code=code, queries=queries, feature=feature, condition_once=condition_once, subset_tokens=subset_tokens, subset_meta=subset_meta, only_last_mword=only_last_mword, verbose=verbose, clone=F)
return(selfclone)
}
hits = search_features(self, keyword=keyword, condition=condition, code=code, queries=queries, feature=feature, condition_once=condition_once, subset_tokens=subset_tokens, subset_meta=subset_meta, keep_false_condition=F, only_last_mword=only_last_mword, verbose=verbose)
invisible(self)
},
search_recode = function(feature, new_value, keyword, condition=NA, condition_once=F, subset_tokens=NA, subset_meta=NA, clone=self$clone_on_change){
subset = if (is(substitute(subset), 'call')) deparse(substitute(subset)) else subset
subset_meta = if (is(substitute(subset_meta), 'call')) deparse(substitute(subset_meta)) else subset_meta
if (clone) {
selfclone = self$clone()$search_recode(feature=feature, new_value=new_value, keyword=keyword, condition=condition, condition_once=condition_once, subset_tokens=subset_tokens, subset_meta=subset_meta, clone=F)
return(selfclone)
}
hits = self$search_features(keyword=keyword, condition=condition, condition_once=condition_once, subset_tokens=subset_tokens, subset_meta=subset_meta)
x = as.numeric(as.character(hits$i)) ## for one of those inexplicable R reasons, I cannot directly use this numeric vector.... really no clue at all why
self$set_column(feature, new_value, subset = x, clone = F)
invisible(self)
},
search_contexts = function(query, code=NULL, feature='word', context_level=c('document','sentence'), verbose=F){
search_contexts(self, query, code=code, feature=feature, context_level=context_level, verbose=verbose)
},
subset_query = function(query, feature='word', context_level=c('document','sentence'), clone=self$clone_on_change){
if (clone) {
selfclone = self$clone()$subset_query(query=query, feature=feature, context_level=context_level, clone=F)
return(selfclone)
}
hits = self$search_contexts(query, feature=feature, context_level=context_level)
if (is.null(hits)) return(NULL)
if (context_level == 'document'){
self$subset(doc_id %in% unique(hits$doc_id), clone = F)
}
if (context_level == 'sentence'){
d = self$data(c('doc_id','sent_i'))
d$i = 1:nrow(d)
rows = d[list(hits$doc_id, hits$sent_i)]$i
self$subset(rows, clone = F)
}
invisible(self)
},
## CO-OCCURRENCE NETWORKS ##
semnet = function(feature, measure=c('con_prob', 'con_prob_weighted', 'cosine', 'count_directed', 'count_undirected', 'chi2'), context_level=c('document','sentence'), backbone=F, n.batches=NA){
semnet(self, feature=feature, measure=measure, context_level=context_level, backbone=backbone, n.batches=n.batches)
},
semnet_window = function(feature, measure=c('con_prob', 'cosine', 'count_directed', 'count_undirected', 'chi2'), context_level=c('document','sentence'), window.size=10, direction='<>', backbone=F, n.batches=5, set_matrix_mode=c(NA, 'windowXwindow','positionXwindow')){
semnet_window(self, feature=feature, measure=measure, context_level=context_level, window.size=window.size, direction=direction, backbone=backbone, n.batches=n.batches, set_matrix_mode=set_matrix_mode)
},
## RESOURCES ##
jrc_names = function(new_feature='jrc_names', feature='word', resource_path=getOption('tcorpus_resources', NULL), collocation_labels=T, batchsize=50000, low_memory=T, verbose=T, clone=self$clone_on_change){
if (clone) {
selfclone = self$clone()$jrc_names(new_feature=new_feature, feature=feature, resource_path=resource_path, collocation_labels=collocation_labels, batchsize=batchsize, low_memory=low_memory, verbose=verbose, clone=F)
return(selfclone)
}
jrc_names(self, new_feature=new_feature, feature=feature, resource_path=resource_path, collocation_labels=collocation_labels, batchsize=batchsize, low_memory=low_memory, verbose=verbose)
},
## util
set_keys = function(){
## ignore clone T or F, since setting keys is always a good thing
if ('sent_i' %in% colnames(private$.data)){
setkey(private$.data, 'doc_id', 'sent_i', 'word_i')
} else {
setkey(private$.data, 'doc_id', 'word_i')
}
setkey(private$.meta, 'doc_id')
if (!is.null(private$.feature_index)) setkey(private$.feature_index, 'feature')
},
droplevels = function(clone=self$clone_on_change){
if (clone) {
selfclone = self$clone()$droplevels(clone=F)
return(selfclone)
}
private$.data = base::droplevels(private$.data)
private$.meta = base::droplevels(private$.meta)
invisible(self)
}
),
active = list(
n = function() nrow(private$.data),
n_meta = function() nrow(private$.meta),
feature_names = function(e=NULL) {
if (!is.null(e)) stop('Cannot change tcorpus$featurenames by assignment. Instead, use the set_colname() function')
fnames = colnames(private$.data)[!colnames(private$.data) %in% c('doc_id','sent_i','word_i')]
},
names = function(e=NULL) {
if (!is.null(e)) stop('Cannot change tcorpus$datanames by assignment. Instead, use the set_colname() function')
colnames(private$.data)
},
meta_names = function(e=NULL) {
if (!is.null(e)) stop('Cannot change tcorpus$metanames by assignment. Instead, use the set_meta_colname() function')
colnames(private$.meta)
}
)
)
x = c(NA,NA)
levels(x) = union(levels(x), levels(factor('t')))
x
x
x = c(NA,NA)
levels(x) = union(levels(x), levels(factor('t')))
x[1] = factor('t')
x
factor('t')
levels(x)
x[1] = factor('t')
x[1]
x
x = c(NA,NA)
class(x)
x = c(NA,NA)
class(x)
x
x = c(NA,NA)
x
y = factor('y')
if(is(y, 'factor')) x = as.factor(x)
x
levels(x) = union(levels(x), levels(y))
x
x[1] = y
x
y = factor('y')
x = c(NA,NA,'r')
if(is(y, 'factor')) x = as.factor(x)
x
levels(x) = union(levels(x), levels(y))
x
x[1] = y
x
source('~/Dropbox/tcorpus/R/tcorpus.r')
source('~/Dropbox/tcorpus/R/tcorpus.r')
source('~/Dropbox/tcorpus/R/tcorpus.r')
source('~/Dropbox/tcorpus/R/tcorpus.r')
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
g = tc$semnet('word', measure = 'count_undirected')
expect_equal(sum(E(g)$weight), 44)
g = tc$semnet('word', measure = 'count_undirected')
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
tc = create_tcorpus(text)
g = tc$semnet('word', measure = 'count_undirected')
library(tcorpus)
tcorpus:::sourceall()
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
tc = create_tcorpus(text)
g = tc$semnet('word', measure = 'count_undirected')
source('~/Dropbox/tcorpus/R/tcorpus.r')
g = tc$semnet('word', measure = 'count_undirected')
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
tc = create_tcorpus(text)
## add semnet_browser!!
## use the same type of network as we used in the visualisation of research questions (you know what I mean)
## Enable clicking on nodes and edges to see info. e.g., kwic (also of co-occurrences)
g = tc$semnet('word', measure = 'count_undirected')
tcorpus:::sourceall()
g = tc$semnet('word', measure = 'count_undirected')
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
tc = create_tcorpus(text)
## add semnet_browser!!
## use the same type of network as we used in the visualisation of research questions (you know what I mean)
## Enable clicking on nodes and edges to see info. e.g., kwic (also of co-occurrences)
g = tc$semnet('word', measure = 'count_undirected')
expect_equal(sum(E(g)$weight), 44)
g = tc$semnet('word', measure = 'cosine')
expect_equal(round(sum(E(g)$weight),2), 37.94)
g = tc$semnet('word', measure = 'con_prob')
expect_equal(sum(E(g)$weight), 77.5)
g = tc$semnet('word', measure = 'con_prob_weighted')
expect_equal(round(sum(E(g)$weight),2), 39.38)
g = tc$semnet('word', measure = 'chi2')
expect_equal(round(sum(E(g)$weight),2), 36.35)
g_ego = ego_semnet(g, c('fuel','fuels'), only_filter_vertices = F)
expect_equal(unique(get.data.frame(g_ego)$from), c('fuel','fuels'))
## windowed semnet
g = tc$semnet_window('word', window.size = 10, measure = 'count_directed')
expect_equal(ecount(g), 88)
g = tc$semnet_window('word', window.size = 5, measure = 'count_directed')
expect_equal(ecount(g), 82)
g = tc$semnet_window('word', window.size = 10, measure = 'chi2')
expect_equal(ecount(g), 88)
g = tc$semnet_window('word', window.size = 10, measure = 'cosine')
g = tc$semnet_window('word', window.size = 10, measure = 'con_prob')
## backbone extraction
g = tc$semnet('word', measure = 'cosine')
gb = backbone_filter(g, alpha=0.5)
expect_equal(ecount(gb), 43)
## also works with NA's (which are ignored)
tc_withNA = tc$search_recode('word', NA, 'Rutte OR Renewable')
g = tc_withNA$semnet('word', measure = 'count_undirected')
expect_true(!'Rutte' %in% V(g)$name)
g = tc_withNA$semnet_window('word', window.size = 10, n.batches = NA)
tc_withNA
tc_withNA$data()
g = tc_withNA$semnet('word', measure = 'count_undirected')
V(g)$name
tc_withNA$data()
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
tc = create_tcorpus(text)
tc$data
tc$data()
x
x = c('NA','x','y')
x = c(NA,'x','y')
x
levels(x) = c(levels(x), c('test','y'))
levels(x)
x
x = as.factor(c(NA,'x','y'))
levels(x) = c(levels(x), c('test','y'))
levels(x)
c(levels(x), c('test','y'))
source('~/Dropbox/tcorpus/R/tcorpus.r')
library(tcorpus)
source('~/Dropbox/tcorpus/R/tcorpus.r')
get_feature_regex("(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5)
get_feature_regex('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')
get_feature_regex('"test dit" "en dat"')
get_feature_regex('"(test die) dit" "en dat"')
get_feature_regex('"(test die) dit"~4 "en dat"')
get_feature_regex('"(test die) dit"~4 "en dat"~5')
get_feature_regex('"(test die) dit"~4 "(en ook) dat"~5')
print(get_feature_regex('"(test die) dit" "(en ook) dat"'))
print(parse_queries('"(test die) dit" "(en ook) dat"'))
print(parse_queries('"(test die) dit" "en ook dat"'))
)
print(parse_queries('"(test die) dit" "(en ook) dat"'))
print(parse_queries('"(test die) dit" "(en ook) dat"'))[1,]$form
source('~/Dropbox/tcorpus/R/query.r')
print(parse_queries('"(test die) dit" "(en ook) dat"'))[1,]$form
print(parse_queries('"(test die) dit" (en ook)'))[1,]$form
parse_queries('"(test die) dit" (en ook)')
parse_queries('"(test die) dit" (en ook)')
parse_queries('"(test die) dit" (en ook)')
parse_queries('"(test die) dit" (en ook)')
parse_queries('"(test die) dit" en ook')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
library(tcorpus)
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')
source('~/Dropbox/tcorpus/R/query.r')
load('backup.rdata')
load('~/Dropbox/yeheng/backup.rdata')
test = tc$search_features('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')
parse_queries('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')
parse_queries('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')[1,]$terms
parse_queries('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')[1,]$terms[1]
test = parse_queries('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')[1,]$terms[1]
get_feature_regex(test)
source('~/Dropbox/tcorpus/R/search_features.r')
source('~/Dropbox/tcorpus/R/search.r')
test = tc$search_features('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')
source('~/Dropbox/tcorpus/R/search.r')
source('~/Dropbox/tcorpus/R/search.r')
tc = tokens_to_tcorpus(tc$data(as.df = T))
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
tc = create_tcorpus(text, doc_id = c('a','b','c'), split_sentences = T)
test = tc$search_features('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')
source('~/Dropbox/tcorpus/R/search.r')
source('~/Dropbox/tcorpus/R/search.r')
source('~/Dropbox/tcorpus/R/search.r')
source('~/Dropbox/tcorpus/R/search.r')
get_feature_regex('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')
get_feature_regex('"(not hardly) test”~10')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/search.r')
source('~/Dropbox/tcorpus/R/search.r')
source('~/Dropbox/tcorpus/R/query.r')
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter',
'Hey, A ~ symbol!! Can I match that?')
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
hits = tc$search_contexts('mark AND rutte')
expect_equal(as.character(hits$doc_id), 'c')
hits = tc$search_contexts('"mark rutte"', context_level = 'sentence')
expect_equal(hits$sent_i, 1)
## test context boundaries
hits = tc$search_contexts('"rutte bos"~5', context_level = 'document') ## should find rutte and bos across sentences
expect_true(!is.null(hits))
hits = tc$search_contexts('"rutte bos"~5', context_level = 'sentence') ## should not find rutte and bos across sentences
expect_true(is.null(hits))
## proximity search
hits = tc$search_contexts('"rutte bos"~5', context_level = 'sentence') ## should not find rutte and bos across sentences
hits
get_feature_regex('"rutte bos"~5"')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('"rutte bos"~5', context_level = 'document') ## should find rutte and bos across sentences
hits = tc$search_contexts('"rutte bos"~5', context_level = 'sentence') ## should not find rutte and bos across sentences
hits
get_feature_regex('"rutte bos"~5')
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('"rutte bos"~5')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('"rutte bos"~5')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')
get_feature_regex('"(  not     hardly  )  ( doing    ambitio* )  (  enough      sufficiently )  ”~10 "lack (action initiative  )”~5')
x = get_feature_regex('"(  not     hardly  )  ( doing    ambitio* )  (  enough      sufficiently )  ”~10 "lack (action initiative  )”~5')
y = get_feature_regex('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')
identical(x,y)
y
x
source('~/Dropbox/tcorpus/R/query.r')
x = get_feature_regex('"(  not     hardly  )  ( doing    ambitio* )  (  enough      sufficiently )  ”~10 "lack (action initiative  )”~5')
y = get_feature_regex('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')
identical(x,y)
x
y
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
"\"( not | hardly ) | ( doing | ambitio* ) | ( enough | sufficiently ) | \"~10"
test = "\"( not | hardly ) | ( doing | ambitio* ) | ( enough | sufficiently ) | \"~10"
parmatch = regexpr('\\(.*\\)', test)
regmatches(test, parmatch)
parmatch = regexpr('(?<=()).*?(?=))', test)
parmatch = regexpr('(?<=\\()).*?(?=\\))', test)
parmatch = regexpr('(?<=\\()).*?(?=\\))', test, perl=T)
parmatch = regexpr('(?<={).*?(?=})', test, perl=T)
regmatches(test, parmatch)
test = "\"( not | hardly ) | ( doing | ambitio* ) | ( enough | sufficiently ) | \"~10"
parmatch = regexpr('(?<={).*?(?=})', test, perl=T)
regmatches(test, parmatch)
parmatch = regexpr('(?<=\\().*?(?=})', test, perl=T)
parmatch = regexpr('(?<=\\().*?(?=\\))', test, perl=T)
regmatches(test, parmatch)
test = "\"( not | hardly ) | ( doing | ambitio* ) | ( enough | sufficiently ) | \"~10"
parmatch = regexpr('(?<=\\().*?(?=\\))', test, perl=T)
regmatches(test, parmatch)
test = "\"( not | hardly ) | ( doing | ambitio* ) | ( enough | sufficiently ) | \"~10"
parmatch = regexpr('(?<=\\().*?(?=\\))', test, perl=T)
parmatch
regmatches(test, parmatch)
parmatch = regexpr('(?<=\\().*?(?=\\))+', test, perl=T)
regmatches(test, parmatch)
parmatch = regexpr('(?<=\\().*?(?=\\))*', test, perl=T)
regmatches(test, parmatch)
parmatch = regexpr('(?<=\\().*?(?=\\))', test, perl=T)
regmatches(test, parmatch)
test = "\"( not | hardly ) | ( doing | ambitio* ) | ( enough | sufficiently ) | \"~10"
parmatch = regexpr('(?<=\\().*?(?=\\))', test, perl=T)
regmatches(test, parmatch)
regmatches('"test dit" en "ook dit"', gregexpr('(\").*?(\"?)', '"test dit" en "ook dit"'))
regmatches('"test dit" en "ook dit"', gregexpr('(\").*?(\"?)', '"test dit" en "ook dit"', perl=T))
x = '"test dit" en "ook dit"'
regmatches(x, gregexpr('(\").*?(\"([<>^~][<>~^0-9s]+)?)', x, perl = T))
x = '{test dit} en {ook dit}'
regmatches(x, gregexpr('(?<={).*?(?=})', x, perl = T))
x = '(test dit) en (ook dit)'
regmatches(x, gregexpr('\\(.*\\)', x, perl = T))
x = '(test dit) en (ook dit)'
regmatches(x, gregexpr('\\(.*\\)', x, perl = T))
regmatches(x, gregexpr('(?<=\\)).*?(?=\\))', x, perl = T))
regmatches(x, gregexpr('(?<=)).*?(?=))', x, perl = T))
regmatches(x, gregexpr('(?<={).*?(?=})', x, perl = T))
x = '(test dit) en (ook dit)'
regmatches(x, gregexpr('(?<={).*?(?=})', x, perl = T))
x = '{test dit} en {ook dit}'
regmatches(x, gregexpr('(?<={).*?(?=})', x, perl = T))
x = '(test dit) en (ook dit)'
regmatches(x, gregexpr('(?<={).*?(?=})', x, perl = T))
regmatches(x, gregexpr('(?<=\\().*?(?=\\))', x, perl = T))
x = '(test dit) en (ook dit)'
regmatches(x, gregexpr('(?<=\\().*?(?=\\))', x, perl = T))
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
x = c('(what the) (actual fuck)')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
print(get_feature_regex('"(  not     hardly  )  ( doing    ambitio* )  (  enough      sufficiently )  ”~10 "lack (action initiative  )”~5'))
x = get_feature_regex('"(  not     hardly  )  ( doing    ambitio* )  (  enough      sufficiently )  ”~10 "lack (action initiative  )”~5')
y = get_feature_regex('"(not hardly) (doing ambitio*) (enough sufficiently)”~10 "lack (action initiative)”~5')
identical(x,y)
x
y
tc$search_features('"mark rutte"')
tc$search_features('"mark rutte "')
tc$search_features('"mark rutte    "')
get_feature_regex('"mark rutte    "')
source('~/Dropbox/tcorpus/R/query.r')
library(tcorpus)
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
library(tcorpus)
source('~/Dropbox/tcorpus/R/search.r')
