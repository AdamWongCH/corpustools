source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter',
'Hey, A ~ symbol!! Can I match that?')
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
hits = tc$search_contexts('mark AND rutte')
hits = tc$search_contexts('"mark rutte"', context_level = 'sentence')
hits = tc$search_contexts('"rutte bos"~5', context_level = 'document') ## should find rutte and bos across sentences
hits = tc$search_contexts('"rutte bos"~5', context_level = 'sentence') ## should not find rutte and bos across sentences
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter',
'Hey, A ~ symbol!! Can I match that?')
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
hits = tc$search_contexts('mark AND rutte')
expect_equal(as.character(hits$doc_id), 'c')
hits
source('~/Dropbox/tcorpus/R/query.r')
hits
expect_equal(as.character(hits$doc_id), 'c')
hits = tc$search_contexts('mark AND rutte')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('mark AND rutte')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('mark AND rutte')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('mark AND rutte')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('mark AND rutte')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('mark AND rutte')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('mark AND rutte')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('mark AND rutte')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('mark AND rutte')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
tc = create_tcorpus(text, doc_id = c('a','b','c'), split_sentences = T)
hits = tc$search_features(keyword = 'fuel')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_features(keyword = 'fuel')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_features(keyword = 'fuel')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_features(keyword = 'fuel')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_features(keyword = 'fuel')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_features(keyword = 'fuel')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_features(keyword = 'fuel')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_features(keyword = 'fuel')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
gsub(FORM_REGEX, '', 'test\\1test')
gsub(FORM_REGEX, '', 'test\\\\1test')
gsub(FORM_REGEX, '', 'test\\\\1test')
gsub(FORM_REGEX, '', 'test\\1test')
parse_queries('test\\1test')
parse_queries('test\\1 test')
parse_queries('test\\1 test')[1,]$terms
FORM_REGEX
FORM_SYMBOLS = '!&()| {}"'
FORM_REGEX = sprintf('([^%s]+)', FORM_SYMBOLS)
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
parse_queries('test\\&test')
parse_queries('test\\*test')
terms$regex = gsub(FORM_REGEX, '\\\\b\\1\\\\b', 'etst\\1test) ## add word boundaries
esc = get_escaped_table(terms)
if(!is.null(esc)) for(i in 1:nrow(esc)) terms = gsub(esc$esc[i], esc$id[i], terms, fixed = T)
terms = data.frame(term = terms,
regex = gsub('[<>^~].*', '', terms),
window = ifelse(grepl('~[s]*[0-9][s]*', terms) == T, gsub('.*~[s]*([0-9]*).*', '\\1', terms), default_window),
direction = get_direction(terms),
condition_window = ifelse(grepl('[<>^][0-9]', terms) == T, gsub('.*[<>^]([0-9]*).*', '\\1', terms), default_window),
ignore_case = ifelse(grepl('~[0-9]*[s][0-9]*', terms) == T, F, T)) ## if a case sensitive flag occurs (~s) then do not ignore case. Note that the case_insensitive_flags function takes care of case insensitive words in multiword strings
terms$window = as.numeric(as.character(terms$window))
terms$condition_window = as.numeric(as.character(terms$condition_window))
terms$regex = gsub('([.+])', '\\\\\\1', terms$regex) ## escape special regex characters
terms$regex = gsub('*', '.*', terms$regex, fixed=T) # wildcard: anything, or nothing
terms$regex = gsub('?', '.?', terms$regex, fixed=T) # wildcard: one character that can be anything, or nothing
terms$regex = gsub('"', '', terms$regex, fixed=T) # remove quotes
terms$regex = gsub('\\{|\\}', '', terms$regex)
#FORM_REGEX
terms$regex = gsub(FORM_REGEX, '\\\\b\\1\\\\b', terms$regex) ## add word boundaries
terms$regex = ifelse(terms$ignore_case, terms$regex, case_insensitive_flags(terms$term, terms$regex))
if(!is.null(esc)) for(i in 1:nrow(esc)) terms$regex = gsub(esc$esc[i], esc$id[i], terms$regex, fixed = T)
#print(terms)
unique(terms)
}
get_escaped_table <- function(x){
if(length(x) == 0) return(NULL)
esc = stringi::stri_extract_all_regex(x, '\\\\.')
if (any(is.na(esc)) | any(is.null(esc))) return(NULL)
esc = unique(unlist(esc))
data.frame(id=paste0('||',1:length(esc)), esc=esc)
}
get_direction <- function(term){
if(length(term) == 0) return(NULL)
direction = '<>'
left = grepl('<[0-9]', term)
right = grepl('>[0-9]', term)
direction[left &! right] = '<'
direction[!left & right] = '>'
direction
}
case_insensitive_flags <- function(term, regex){
## we cannot force case sensitive search within a case insensitive regex. However, we can use the (?i) regex flag to force case insensitive in a case sensitive search.
## so for terms that contains at least one s flag, we use case sensitive search, and for individual words for which the flag is not set we use the (?i) regex flag
newr = regex
for (i in 1:length(term)){
if (grepl('\\"[0-9^]*~[0-9]*s', term[[i]])) {
next ## if the s flag is set around the multiword string "Like This"~s, then all words are case sensitive
} else {
t = stringi::stri_split(term[[i]], regex=' ')[[1]]  # this solution is not pretty, as it assumes that the term and regex strings have the same spaces. This should be the case, but it's still ugly. Fix if we have a better idea
r = stringi::stri_split(regex[[i]], regex=' ')[[1]]
s_flag = grepl('~[0-9]*s', t)
r[!s_flag] = sprintf('(?i)%s(?-i)', r[!s_flag])
newr[i] = paste(r[[i]], collapse=' ')
}
}
newr
}
qualify_queries <- function(queries){
boo = c()
for(i in 1:nrow(queries)){
if (queries$keyword[i] == '') boo = c(boo, sprintf('Code "%s": no keyword', queries$code[i]))
if (queries$keyword[i] == '*') boo = c(boo, sprintf('Code "%s": keyword cannot be *', queries$code[i]))
}
if (length(boo) > 0) stop(paste(boo, collapse='\n'))
}
terms$regex = gsub(FORM_REGEX, '\\\\b\\1\\\\b', 'etst\\1test') ## add word boundaries
FORM_REGEX
gsub(FORM_REGEX, '\\\\b\\1\\\\b', 'etst\\1test') ## add word boundaries
gsub(FORM_REGEX, '\\\\b\\1\\\\b', 'etst\\1test') ## add word boundaries
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('\\~')
grepl('\\~', '~')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter',
'Hey, A ~ symbol!! Can I match that?')
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
tc$search_features('\\~')
hits = tc$search_features('\\~')
expect_equal(hits$feature, '~')
hits
hits = tc$search_features('\\?')
hits
expect_equal(as.character(hits$feature), '?')
hits = tc$search_contexts('\\~')
hits
hits = tc$search_features('\\?')
expect_equal(as.character(hits$doc_id), 'd')
library(tcorpus)
interpretCodebook <- function(cb, code_columns){
code_columns = code_columns[code_columns %in% colnames(cb)]
code = cb[,code_columns]
code[is.na(code)] = ''
cb = data.frame(code_id = cb$code_id,
code = as.character(apply(code, 1, paste, collapse='')),
level = apply(code, 1, function(x) min(which(!x == ''))), # first column with text
indicator = as.character(cb$indicator),
condition = as.character(cb$condition))
cb$parent_id = NA
parents = NA
for(i in 1:nrow(cb)){
j = cb$level[i]
parents[j] = cb$code_id[i]
cb$parent_id[i] = ifelse(j > 1, parents[j-1], NA)
}
cb$parent = cb$code[match(cb$parent_id, cb$code_id)]
cb
}
cb = read.csv('~/Desktop/ontology.csv')
cb
interpretCodebook <- function(cb, code_columns = NULL){
if(is.null(code_columns)) code_columns = setdiff(colnames(cb), ('keyword','indicator'))
code_columns = code_columns[code_columns %in% colnames(cb)]
code = cb[,code_columns]
code[is.na(code)] = ''
cb = data.frame(code_id = cb$code_id,
code = as.character(apply(code, 1, paste, collapse='')),
level = apply(code, 1, function(x) min(which(!x == ''))), # first column with text
indicator = as.character(cb$indicator),
condition = as.character(cb$condition))
cb$parent_id = NA
parents = NA
for(i in 1:nrow(cb)){
j = cb$level[i]
parents[j] = cb$code_id[i]
cb$parent_id[i] = ifelse(j > 1, parents[j-1], NA)
}
cb$parent = cb$code[match(cb$parent_id, cb$code_id)]
cb
}
interpretCodebook <- function(cb, code_columns = NULL){
if(is.null(code_columns)) code_columns = setdiff(colnames(cb), ('keyword','indicator'))
code_columns = code_columns[code_columns %in% colnames(cb)]
code = cb[,code_columns]
code[is.na(code)] = ''
cb = data.frame(code_id = cb$code_id,
code = as.character(apply(code, 1, paste, collapse='')),
level = apply(code, 1, function(x) min(which(!x == ''))), # first column with text
indicator = as.character(cb$indicator),
condition = as.character(cb$condition))
cb$parent_id = NA
parents = NA
for(i in 1:nrow(cb)){
j = cb$level[i]
parents[j] = cb$code_id[i]
cb$parent_id[i] = ifelse(j > 1, parents[j-1], NA)
}
cb$parent = cb$code[match(cb$parent_id, cb$code_id)]
cb
}
if(is.null(code_columns)) code_columns = setdiff(colnames(cb), ('keyword','indicator'))
interpretCodebook <- function(cb, code_columns = NULL){
if(is.null(code_columns)) code_columns = setdiff(colnames(cb), c('keyword','indicator'))
code_columns = code_columns[code_columns %in% colnames(cb)]
code = cb[,code_columns]
code[is.na(code)] = ''
cb = data.frame(code_id = cb$code_id,
code = as.character(apply(code, 1, paste, collapse='')),
level = apply(code, 1, function(x) min(which(!x == ''))), # first column with text
indicator = as.character(cb$indicator),
condition = as.character(cb$condition))
cb$parent_id = NA
parents = NA
for(i in 1:nrow(cb)){
j = cb$level[i]
parents[j] = cb$code_id[i]
cb$parent_id[i] = ifelse(j > 1, parents[j-1], NA)
}
cb$parent = cb$code[match(cb$parent_id, cb$code_id)]
cb
}
cb = read.csv('~/Desktop/ontology.csv')
interpretCodebook <- function(cb, code_columns = NULL){
if(is.null(code_columns)) code_columns = setdiff(colnames(cb), c('keyword','condition'))
code_columns = code_columns[code_columns %in% colnames(cb)]
code = cb[,code_columns]
code[is.na(code)] = ''
cb = data.frame(code_id = cb$code_id,
code = as.character(apply(code, 1, paste, collapse='')),
level = apply(code, 1, function(x) min(which(!x == ''))), # first column with text
keyword = as.character(cb$keyword),
condition = as.character(cb$condition))
cb$parent_id = NA
parents = NA
for(i in 1:nrow(cb)){
j = cb$level[i]
parents[j] = cb$code_id[i]
cb$parent_id[i] = ifelse(j > 1, parents[j-1], NA)
}
cb$parent = cb$code[match(cb$parent_id, cb$code_id)]
cb
}
cb = read.csv('~/Desktop/ontology.csv')
interpretCodebook(cb)
apply(cb, paste, collapse='')
apply(cb, 1, paste, collapse='')
cb[is.na(cb)] = ''
apply(cb, 1, paste, collapse='')
interpretCodebook <- function(cb, code_columns = NULL){
cb[is.na(cb)] = 0
cb = cb[!apply(cb, 1, paste, collapse='') == '',]
if(is.null(code_columns)) code_columns = setdiff(colnames(cb), c('keyword','condition'))
code_columns = code_columns[code_columns %in% colnames(cb)]
code = cb[,code_columns]
code[is.na(code)] = ''
cb = data.frame(code_id = cb$code_id,
code = as.character(apply(code, 1, paste, collapse='')),
level = apply(code, 1, function(x) min(which(!x == ''))), # first column with text
keyword = as.character(cb$keyword),
condition = as.character(cb$condition))
cb$parent_id = NA
parents = NA
for(i in 1:nrow(cb)){
j = cb$level[i]
parents[j] = cb$code_id[i]
cb$parent_id[i] = ifelse(j > 1, parents[j-1], NA)
}
cb$parent = cb$code[match(cb$parent_id, cb$code_id)]
cb
}
cb = read.csv('~/Desktop/ontology.csv')
interpretCodebook(cb)
cb = read.csv('~/Desktop/ontology.csv')
code_columns=NULL
cb[is.na(cb)] = 0
cb = cb[!apply(cb, 1, paste, collapse='') == '',]
cb
interpretCodebook <- function(cb, code_columns = NULL){
cb[is.na(cb)] = ''
cb = cb[!apply(cb, 1, paste, collapse='') == '',]
if(is.null(code_columns)) code_columns = setdiff(colnames(cb), c('keyword','condition'))
code_columns = code_columns[code_columns %in% colnames(cb)]
code = cb[,code_columns]
code[is.na(code)] = ''
cb = data.frame(code_id = cb$code_id,
code = as.character(apply(code, 1, paste, collapse='')),
level = apply(code, 1, function(x) min(which(!x == ''))), # first column with text
keyword = as.character(cb$keyword),
condition = as.character(cb$condition))
cb$parent_id = NA
parents = NA
for(i in 1:nrow(cb)){
j = cb$level[i]
parents[j] = cb$code_id[i]
cb$parent_id[i] = ifelse(j > 1, parents[j-1], NA)
}
cb$parent = cb$code[match(cb$parent_id, cb$code_id)]
cb
}
cb = read.csv('~/Desktop/ontology.csv')
interpretCodebook(cb)
cb[is.na(cb)] = ''
cb = cb[!apply(cb, 1, paste, collapse='') == '',]
cb
code_columns = code_columns[code_columns %in% colnames(cb)]
code_columns
if(is.null(code_columns)) code_columns = setdiff(colnames(cb), c('keyword','condition'))
code_columns
code_columns = code_columns[code_columns %in% colnames(cb)]
code_columns
code = cb[,code_columns]
code[is.na(code)] = ''
cb = data.frame(code_id = cb$code_id,
code = as.character(apply(code, 1, paste, collapse='')),
level = apply(code, 1, function(x) min(which(!x == ''))), # first column with text
keyword = as.character(cb$keyword),
condition = as.character(cb$condition))
code
cb$code_id
as.character(apply(code, 1, paste, collapse=''))
apply(code, 1, function(x) min(which(!x == '')))
if(!'code_id' %in% colnames(cb)) cb$code_id = 1:nrow(cb)
cb = data.frame(code_id = cb$code_id,
code = as.character(apply(code, 1, paste, collapse='')),
level = apply(code, 1, function(x) min(which(!x == ''))), # first column with text
keyword = as.character(cb$keyword),
condition = as.character(cb$condition))
cb
interpretCodebook <- function(cb, code_columns = NULL){
cb[is.na(cb)] = ''
cb = cb[!apply(cb, 1, paste, collapse='') == '',]
if(is.null(code_columns)) code_columns = setdiff(colnames(cb), c('keyword','condition'))
code_columns = code_columns[code_columns %in% colnames(cb)]
code = cb[,code_columns]
code[is.na(code)] = ''
if(!'code_id' %in% colnames(cb)) cb$code_id = 1:nrow(cb)
cb = data.frame(code_id = cb$code_id,
code = as.character(apply(code, 1, paste, collapse='')),
level = apply(code, 1, function(x) min(which(!x == ''))), # first column with text
keyword = as.character(cb$keyword),
condition = as.character(cb$condition))
cb$parent_id = NA
parents = NA
for(i in 1:nrow(cb)){
j = cb$level[i]
parents[j] = cb$code_id[i]
cb$parent_id[i] = ifelse(j > 1, parents[j-1], NA)
}
cb$parent = cb$code[match(cb$parent_id, cb$code_id)]
cb
}
cb = read.csv('~/Desktop/ontology.csv')
interpretCodebook(cb)
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter',
'Hey, A ~ symbol!! Can I match that?')
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
tc
tc
library(tcorpus)
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter',
'Hey, A ~ symbol!! Can I match that?')
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
tc
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter',
'Hey, A ~ symbol!! Can I match that?')
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
tc
gc()
gc()
gc()
tc
gc()
gc()
gc()
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter',
'Hey, A ~ symbol!! Can I match that?')
gc()
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
gc()
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
gc()
for(i in 1:1000) tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
gc()
gc()
gc()
d = data.table(x = 1:1000000)
gc()
d = data.table(x = as.character(1:1000000))
gc()
d = data.table(x = as.character(1:1000000))
gc()
d = data.table(x = as.character(1:1000000))
gc()
d = data.table(x = as.character(1:1000000))
gc()
d = data.table(x = as.character(1:1000000))
gc()
for(i in 1:100) tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
gc()
gc()
for(i in 1:100) tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
gc()
gc()
for(i in 1:100) tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
gc()
for(i in 1:100) tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
gc()
for(i in 1:100) tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
gc()
gc()
for(i in 1:100) tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
for(i in 1:100) tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
gc()
gc()
gc()
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter',
'Hey, A ~ symbol!! Can I match that?')
tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
gc()
for(i in 1:100) tc = create_tcorpus(text, doc_id = c('a','b','c','d'), split_sentences = T)
gc()
