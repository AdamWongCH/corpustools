get_feature_regex('NOT bos')
terms = 'NOT bos'
terms = parse_queries(terms)
terms
& ! 3
! 3
source('~/Dropbox/tcorpus/R/query.r')
query = stringi::stri_trim(query)
grepl('^test', ' test', perl=T)
grepl('^test', 'test', perl=T)
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('NOT bos')
parse_queries('NOT bos')
text = c('Renewable TeST is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
tc = create_tcorpus(text, doc_id = c('a','b','c'), split_sentences = T)
source('~/Dropbox/tcorpus/R/query.r')
tc$search_features('NOT bos')
tc$search_features('bos')
tc$search_features('rutte')
tc$search_features('NOT rutte')
text = c('Renewable TeST is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
tc = create_tcorpus(text, doc_id = c('a','b','c'), split_sentences = T)
tc$search_features('NOT rutte')
parse_queries('NOT rutte')
get_feature_regex('NOT bos')
tc$search_features('NOT rutte')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_contexts('NOT rutte')
tc$search_contexts('rutte')
tc$search_contexts('! rutte')
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter')
tc = create_tcorpus(text, doc_id = c('a','b','c'), split_sentences = T)
hits = tc$search_contexts('"(!bos test) wouter"~10', context_level = 'sentence') # finds "(NOT bos) wouter"~10 OR "test wouter"~10
hits
4 && 3
4 & & 3
4 && 3
4 && 4
F && 4
F && F
T && T
T && c(1,2,3)
1 & c(1,2,3)
1 && c(1,2,3)
1 && c(1,2,F)
1 & c(1,2,F)
1 & c(F,2,F)
1 && c(F,2,F)
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/search.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('"(!bos test) wouter"~10', context_level = 'sentence') # finds "(NOT bos) wouter"~10 OR "test wouter"~10
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter')
tc = create_tcorpus(text, doc_id = c('a','b','c'), split_sentences = T)
hits = tc$search_contexts('"!bos wouter"~10', context_level = 'sentence') # wouter should not occur within 10 words from bos
hits = tc$search_contexts('"(!bos test) wouter"~10', context_level = 'sentence') # finds "(NOT bos) wouter"~10 OR "test wouter"~10
tcorpus:::sourceall()
hits = tc$search_contexts('"(!bos test) wouter"~10', context_level = 'sentence') # finds "(NOT bos) wouter"~10 OR "test wouter"~10
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('"(!bos test) wouter"~10', context_level = 'sentence') # finds "(NOT bos) wouter"~10 OR "test wouter"~10
hits = tc$search_contexts('"(bos !test) wouter"~10', context_level = 'sentence') # finds "bos wouter"~10 OR "(NOT test) wouter"~10
sourceall()
hits = tc$search_contexts('"(bos !test) wouter"~10', context_level = 'sentence') # finds "bos wouter"~10 OR "(NOT test) wouter"~10
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('"(!bos test) wouter"~10', context_level = 'sentence') # finds "(NOT bos) wouter"~10 OR "test wouter"~10
hits = tc$search_contexts('"(bos !test) wouter"~10', context_level = 'sentence') # finds "bos wouter"~10 OR "(NOT test) wouter"~10
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('"(bos !test) wouter"~10', context_level = 'sentence') # finds "bos wouter"~10 OR "(NOT test) wouter"~10
hits = tc$search_contexts('"(!bos test) wouter"~10', context_level = 'sentence') # finds "(NOT bos) wouter"~10 OR "test wouter"~10
sourceall()
hits = tc$search_contexts('"(bos !test) wouter"~10', context_level = 'sentence') # finds "bos wouter"~10 OR "(NOT test) wouter"~10
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('"(bos !test) wouter"~10', context_level = 'sentence') # finds "bos wouter"~10 OR "(NOT test) wouter"~10
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('"(bos !test) wouter"~10', context_level = 'sentence') # finds "bos wouter"~10 OR "(NOT test) wouter"~10
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('"(bos !test) wouter"~10', context_level = 'sentence') # finds "bos wouter"~10 OR "(NOT test) wouter"~10
hits = tc$search_contexts('"(!bos test) wouter"~10', context_level = 'sentence') # finds "(NOT bos) wouter"~10 OR "test wouter"~10
hits = tc$search_contexts('"!bos wouter"~10', context_level = 'sentence') # wouter should not occur within 10 words from bos
hits = tc$search_contexts('!"bos wouter"~10', context_level = 'sentence') # wouter should not occur within 10 words from bos
source('~/Dropbox/tcorpus/R/query.r')
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter')
tc = create_tcorpus(text, doc_id = c('a','b','c'), split_sentences = T)
hits = tc$search_contexts('!"bos wouter"~10', context_level = 'sentence') # wouter should not occur within 10 words from bos
hits
hits = tc$search_contexts('! "bos wouter"~10', context_level = 'sentence') # wouter should not occur within 10 words from bos
hits = tc$search_contexts('NOT "bos wouter"~10', context_level = 'sentence') # wouter should not occur within 10 words from bos
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('NOT "bos wouter"~10', context_level = 'sentence') # wouter should not occur within 10 words from bos
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('NOT "bos wouter"~10', context_level = 'sentence') # wouter should not occur within 10 words from bos
grepl('^[ &]*\\!\\b', ' & ! \"bos wouter\"~10')
grepl('^[ &]*\\!\\b', '  ! \"bos wouter\"~10')
grepl('^[ &]*\\!\\b', '! \"bos wouter\"~10')
grepl('^[ \\&]*\\!\\b', '! \"bos wouter\"~10')
grepl('^[ ]*\\!\\b', '! \"bos wouter\"~10')
grepl('^[ ]*\\!\\b', '! \"bos wouter\"~10', perl = T)
grepl('^\\!', '! \"bos wouter\"~10', perl = T)
grepl('^[ ]*\\!', '! \"bos wouter\"~10', perl = T)
grepl('^[ ]*\\!', ' ! \"bos wouter\"~10', perl = T)
grepl('^[ ]*\\!', ' &! \"bos wouter\"~10', perl = T)
grepl('^[ &]*\\!', ' &! \"bos wouter\"~10', perl = T)
grepl('^[ &]*\\!', ' ! \"bos wouter\"~10', perl = T)
source('~/Dropbox/tcorpus/R/query.r')
hits = tc$search_contexts('NOT "bos wouter"~10', context_level = 'sentence') # wouter should not occur within 10 words from bos
hits = tc$search_contexts('wouter NOT "bos wouter"~10', context_level = 'sentence') # wouter should not occur within 10 words from bos
hits
hits = tc$search_contexts('wouter NOT "bos wouter"~3', context_level = 'sentence') # wouter should not occur within 10 words from bos
hits
expect_true(nrow(hits) == 1)
nrow(hits)
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
parse_queries('NOT rutte')
parse_queries('rutte T~s')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
print(parse_queries('"rutte banaan" T~s'))
{T} | {F}
{T} & {F}
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
parse_queries('rutte T~s')
parse_queries('rutte T~s')$terms
parse_queries('rutte T~s')[,2]
source('~/Dropbox/tcorpus/R/query.r')
print(parse_queries('rutte T~s'))
print(parse_queries('"rutte banaan" T~s'))
get_feature_regex('NOT bos')
get_feature_regex('test NOT bos')
get_feature_regex('test NOT Bos')
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('test NOT Bos')
print(parse_queries('rutte T~s'))
print(parse_queries('"rutte banaan" T~s'))
print(parse_queries('rutte T~s *'))
print(parse_queries('"* NOT banaan" T~s'))
print(parse_queries('* NOT rutte T~s '))
source('~/Dropbox/tcorpus/R/query.r')
print(parse_queries('* NOT rutte T~s '))
grepl('[a(test)]', 'a')
grepl('[a(test)]', 't')
source('~/Dropbox/tcorpus/R/query.r')
grepl('[a-z&&[^c]]', 'a')
grepl('[a-z]', 'a')
grepl('[a-z&&[^c]]', 'a', perl=T)
grepl('[a-z&&[^c]]', 'c', perl=T)
grepl('[a-z[^c]]', 'c', perl=T)
grepl('[a-z[^c]]', 'a', perl=T)
grepl('[a-z&[^c]', 'a', perl=T)
grepl('[a-z&[^c]', 'b', perl=T)
grepl('[a-z&[^c]', 'c', perl=T)
grepl('[a-z]&[^c]', 'c', perl=T)
grepl('[a-z]&[^c]', 'b', perl=T)
grepl('[^a]', 'b', perl=T)
grepl('[^a]', 'a', perl=T)
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
grepl('^a', 'a')
grepl('[^a]', 'a')
grepl('[^a]', c('a','b'))
grepl('[^a]|a', c('a','b'))
grepl('[^a]&a', c('a','b'))
grepl('[^a]&b', c('a','b'))
grepl('[^a]&[b]', c('a','b'))
source('~/Dropbox/tcorpus/R/query.r')
print(parse_queries('* NOT rutte T~s '))
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
query = gsub('(?<= )\\*(?= )|(?<=^)\\*(?= )', '!!', query, perl=T)
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
print(parse_queries('* NOT rutte T~s '))
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
library(tcorpus)
source('~/Dropbox/tcorpus/R/query.r')
tc$search_contexts('! rutte')
tc$search_contexts('* ! rutte')
TRUE ! 5
TRUE &! 5
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
gsub(' +', ' ', 'test  test')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
query
query = 'test dit en&dit ok'
query = 'test (dit en&dit) &ok'
stringi::stri_split(query, '\\b')
stringi::stri_split(query, regex='\\b')
stringi::stri_split(query, regex=' ')
stringi::stri_split(query, regex=REGEX_ALLOW_SYMBOLS)
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('test NOT Bos')
get_feature_regex('test NOT Bos&lommer')
get_feature_regex('test NOT {Bos&lommer}')
get_feature_regex('test NOT "Bos&lommer"')
get_feature_regex('test NOT "Bos & lommer"')
get_feature_regex('test NOT "Bos {&} lommer"')
get_feature_regex('test NOT "Bos {b&b} lommer"')
get_feature_regex('test NOT "Bos {&} lommer"')
get_feature_regex('test {&} NOT "Bos {&} lommer"')
gregrexpr('\(((?>[^()]+)|(?R))*\)'. 'test (dit (en dit) ok)')
gregrexpr('\\(((?>[^()]+)|(?R))*\\)'. 'test (dit (en dit) ok)')
gregrexpr('\\(((?>[^()]+)|(?R))*\\)', 'test (dit (en dit) ok)')
gregexpr('\\(((?>[^()]+)|(?R))*\\)', 'test (dit (en dit) ok)')
gregexpr('\\(((?>[^()]+)|(?R))*\\)', 'test (dit (en dit) ok)', perl=T)
test = gregexpr('\\(((?>[^()]+)|(?R))*\\)', 'test (dit (en dit) ok)', perl=T)
regmatches(test, 'test (dit (en dit) ok)')
regmatches('test (dit (en dit) ok)', test)
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('test {&} NOT "Bos {&} lommer"')
text = c('Renewable test & better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
tc$search_contexts('"test {&} feature")
text = c('Renewable test & better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
tc = create_tcorpus(text, doc_id = c('a','b','c'), split_sentences = T)
print(tc$search_features('TeST~s'))
}
tc$search_contexts('"test {&} better"')
source('~/Dropbox/tcorpus/R/query.r')
grepl('[!a]b', 'b')
grepl('[!a]b', ' b')
grepl('[^a]b', ' b')
grepl('[^a]b', 'b')
grepl('[^a]?b', 'b')
grepl('[^a]?b', 'ab')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_contexts('"test {&} better"')
get_feature_regex('"test {&} better"')
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('"test {&} better"')
tc$search_contexts('"test {&} better"')
get_feature_regex('"test en better"')
get_feature_regex('"test & better"')
get_feature_regex('"test & better"')
get_feature_regex('test & better')
get_feature_regex('test {&} better')
get_feature_regex('test {S&D} better')
get_feature_regex('test {&} better')
source('~/Dropbox/tcorpus/R/query.r')
m = '{test}'
m = gsub('\\{|\\}', '', m)
m
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('test & better')
get_feature_regex('"test & better"')
get_feature_regex('"test& better"')
get_feature_regex('"test & better"')
get_feature_regex('"test & better"')
tc$search_contexts('"test {&} better"')
tc$search_contexts('"test {&} better"')
get_feature_regex('"test & better"')
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('"test & better"')
tc$search_contexts('"test {&} better"')
get_feature_regex('"test & better"')
tc$search_contexts('"test {&} better"')
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('"test & better"')
tc$search_contexts('"test {&} better"')
get_feature_regex('"test & better"')
get_feature_regex('"test {&} better"')
get_feature_regex('"test & better"')
get_feature_regex('"test {&} better"')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('"test & better"')
get_feature_regex('"test {&} better"')
tc$search_contexts('"test{&}better"')
tc$search_contexts('"{test&better}"')
grepl('[^{].*&', 'test&')
grepl('[^{].*&', '{test&')
grepl('[^{].*\\&', '{test&')
grepl('[^\\{].*\\&', '{test&')
gsub('(?<={).*?(?=})', 'test {dit, } en {di}t')
gsub('(?<={).*?(?=})', '', test {dit, } en {di}t')
if (grepl('[^{]&[^}]', m)) stop('Queries cannot contain &/AND statements within quotes')
if (grepl('[^{]![^}]', m)) stop('Queries cannot contain !/NOT statements within quotes')
replacewith = gsub('\\{|\\}', '', m)
replacewith = sprintf('{%s}', replacewith) ## surround with {} to keep entire string as single term
replacewith = gsub(' | ', ' ', replacewith, fixed=T)
#replacewith = gsub('&', ' & ', replacewith)
query = gsub(m, replacewith, query, fixed=T)
parmatch = regexpr('\\(.*\\)', query)
for(m in regmatches(query, parmatch)) {
query = gsub(m, gsub(' ', '|', m, fixed=T), query, fixed=T)
}
}
query = gsub('(?<= )\\*(?= )|(?<=^)\\*(?= )', '!!', query, perl=T)   ## make " * ", as a 'find all' solution, an immediate TRUE. As a placeholder, we use !! (not not, which is technically true, right?)
query = gsub(' +', ' ', query)
split_regex = paste('(?<={).*?(?=})', REGEX_ALLOW_SYMBOLS, sep='|') ##
query_form = as.list(gsub(split_regex, '%s', query, perl=T)) # note that uppercase is not replaced, to keep the TRUE
query_terms = regmatches(query, gregexpr(split_regex, query, perl=T))
for (i in seq_along(query_form)) query_form[[i]] = gsub('!!', T, query_form[[i]]) ## replace the "find all" placeholder
query_form[query_form == ''] = NA
t(mapply(function(x,y) list(form=x, terms=y), query_form, query_terms))
}
fill_query <- function(query_values, query_form){
do.call(sprintf, as.list(c(query_form, query_values)))
}
eval_query <- function(query_values, query_form){
eval(parse(text=fill_query(query_values, query_form)))
}
eval_query_matrix <- function(qm, terms, form){
## only evaluate unique rows of the query matrix, and then match to return the results for each row
combination = apply(qm[,terms,drop=F], 1, function(x) paste(as.numeric(x), collapse=''))
isunique = !duplicated(combination)
ucombination = combination[isunique]
uqm = qm[isunique,,drop=F]
res = apply(uqm[,terms, drop=F], 1, eval_query, query_form=form)
res[match(combination, ucombination)]
}
get_feature_regex <- function(terms, default_window=NA){
terms = parse_queries(terms)
if (length(default_window) == nrow(terms)){
reptimes = sapply(terms[,2], length)
default_window = rep(default_window, reptimes)
}
terms = unlist(terms[,2])
terms = data.frame(term = terms,
regex = gsub('~[0-9].*', '', terms),
window = ifelse(grepl('~[0-9]', terms) == T, gsub('.*~', '', terms), default_window),
ignore_case = ifelse(grepl('~s', terms) == T, F, T)) ## if a case sensitive flag occurs (~s) then do not ignore case. Note that the case_sensitive_flags function takes care of case insensitive words in multiword strings
terms$window[terms$window == 'd'] = NA
terms$window = as.numeric(as.character(terms$window))
terms$regex = gsub('([.+])', '\\\\\\1', terms$regex) ## escape special regex characters
terms$regex = gsub('*', '.*', terms$regex, fixed=T) # wildcard: none or any symbols
terms$regex = gsub('?', '.?', terms$regex, fixed=T) # wildcard: one character that can be anything
terms$regex = gsub('"', '', terms$regex, fixed=T) # remove quotes
terms$regex = gsub(REGEX_ALLOW_SYMBOLS, '\\\\b\\1\\\\b', terms$regex) ## add word boundaries
terms$regex = ifelse(terms$ignore_case, terms$regex, case_sensitive_flags(terms$regex))
unique(terms)
}
case_sensitive_flags <- function(regex){
r = stringi::stri_split(regex, regex=' ')
sapply(r, function(r){
case_flag = grepl('~s', r)
r[!case_flag] = sprintf('(?i)%s(?-i)', r[!case_flag])
r = gsub('~s', '', r)
paste(r, collapse=' ')
})
}
qualify_queries <- function(queries){
boo = c()
for(i in 1:nrow(queries)){
if (queries$keyword[i] == '') boo = c(boo, sprintf('Code "%s": no keyword', queries$code[i]))
if (queries$keyword[i] == '*') boo = c(boo, sprintf('Code "%s": keyword cannot be *', queries$code[i]))
}
if (length(boo) > 0) stop(paste(boo, collapse='\n'))
}
function(){
get_feature_regex('"test & better"')
get_feature_regex('"test {&} better"')
tc$search_contexts('"{test&better}"')
text = c('Renewable test & better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte')
tc = create_tcorpus(text, doc_id = c('a','b','c'), split_sentences = T)
print(tc$search_features('TeST~s'))
}
gsub('(?<={).*?(?=})', '', 'test {dit, } en {di}t')
gsub('(?<={).*?(?=})', '', 'test {dit, } en {di}t', perl=T)
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
get_feature_regex('"test & better"')
get_feature_regex('test {&} better')
get_feature_regex('test & better')
tc$search_contexts('"test & better"')
tc$search_contexts('"test {&} better"')
source('~/Dropbox/tcorpus/R/query.r')
tc$search_contexts('"test {&} better"')
get_feature_regex('"test & better"')
get_feature_regex('test & better')
get_feature_regex('"test & better"')
get_feature_regex('"test & better"')
get_feature_regex('"test {&} better"')
tc$search_contexts('"test {&} better"')
get_feature_regex('"test {&} better"')
print(get_feature_regex('"test {&} better"'))
source('~/Dropbox/tcorpus/R/query.r')
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter')
tc = create_tcorpus(text, doc_id = c('a','b','c'), split_sentences = T)
hits = tc$search_contexts('mark AND rutte')
library(testthat)
hits = tc$search_contexts('mark AND rutte')
expect_equal(as.character(hits$doc_id), 'c')
hits = tc$search_contexts('"mark rutte"', context_level = 'sentence')
expect_equal(hits$sent_i, 1)
hits = tc$search_contexts('"rutte bos"~5', context_level = 'document') ## should find rutte and bos across sentences
expect_true(!is.null(hits))
hits = tc$search_contexts('"rutte bos"~5', context_level = 'sentence') ## should not find rutte and bos across sentences
expect_true(is.null(hits))
hits = tc$search_contexts('"bos wouter"~5', context_level = 'sentence') # bos and wouter within a word distance of 5
expect_true(is.null(hits))
hits = tc$search_contexts('"bos wouter"~10', context_level = 'sentence') #  bos and wouter within a word distance of 10
expect_true(!is.null(hits))
hits = tc$search_contexts('wouter NOT "bos wouter"~10', context_level = 'sentence') # wouter should not occur within 10 words from bos
expect_true(is.null(hits))
hits = tc$search_contexts('wouter NOT "bos wouter"~3', context_level = 'sentence') # wouter should not occur within 10 words from bos
expect_true(nrow(hits) == 1)
hits = tc$search_contexts('"(bos test) wouter"~10', context_level = 'sentence') # finds "bos wouter"~10 OR "test wouter"~10 (but more efficiently than entering these terms manually)
expect_true(!is.null(hits))
tc_rutte = tc$subset_query('"mark rutte"~2', context_level = 'sentence')
expect_equal(tc_rutte$meta('doc_id'), 'c')
hits = tc$search_contexts('wouter NOT "bos wouter"~3', context_level = 'sentence') # wouter should not occur within 10 words from bos
hits
nrow(hits)
tcorpus:::sourceall()
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter')
tc = create_tcorpus(text, doc_id = c('a','b','c'), split_sentences = T)
hits = tc$search_contexts('mark AND rutte')
expect_equal(as.character(hits$doc_id), 'c')
hits = tc$search_contexts('"mark rutte"', context_level = 'sentence')
expect_equal(hits$sent_i, 1)
hits = tc$search_contexts('"rutte bos"~5', context_level = 'document') ## should find rutte and bos across sentences
expect_true(!is.null(hits))
hits = tc$search_contexts('"rutte bos"~5', context_level = 'sentence') ## should not find rutte and bos across sentences
expect_true(is.null(hits))
hits = tc$search_contexts('"bos wouter"~5', context_level = 'sentence') # bos and wouter within a word distance of 5
expect_true(is.null(hits))
hits = tc$search_contexts('"bos wouter"~10', context_level = 'sentence') #  bos and wouter within a word distance of 10
expect_true(!is.null(hits))
hits = tc$search_contexts('wouter NOT "bos wouter"~10', context_level = 'sentence') # wouter should not occur within 10 words from bos
expect_true(is.null(hits))
hits = tc$search_contexts('wouter NOT "bos wouter"~3', context_level = 'sentence') # wouter should not occur within 10 words from bos
expect_true(nrow(hits) == 1)
hits
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/search.r')
source('~/Dropbox/tcorpus/R/search.r')
source('~/Dropbox/tcorpus/R/search.r')
query = 'dit is "een {&} test"'
get_feature_regex(query)
parse_queries(query)
parse_queries(query)[,2]
parse_queries(query)[,2]$terms
parse_queries(query)
parse_queries(query)[,2]$terms
get_feature_regex(parse_queries(query), parse_queries = F)
get_feature_regex(query)
query = 'dit is "een {&} test"'
parse_queries(query)
terms = parse_queries(query)
terms
unlist(terms[,2])
terms[,2]
terms[,2]$terms
query = c('dit is "een {&} test"', 'dit ook')
get_feature_regex(query)
terms = parse_queries(query)
unlist(terms[,2])
terms[,2]$terms
terms[,2]
terms = unlist(terms[,2])
terms = unlist(terms[,2])
terms
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/search.r')
source('~/Dropbox/tcorpus/R/search.r')
source('~/Dropbox/tcorpus/R/query.r')
source('~/Dropbox/tcorpus/R/query.r')
library(tcorpus)
library(tcorpus)
text = c('Renewable fuel is better than fossil fuels!',
'A fueled debate about fuel',
'Mark Rutte is simply Rutte. Bos, on the other hand, is not always Wouter')
tc = create_tcorpus(text, doc_id = c('a','b','c'), split_sentences = T)
hits = tc$search_contexts('mark AND rutte')
hits = tc$search_contexts('"mark rutte"', context_level = 'sentence')
