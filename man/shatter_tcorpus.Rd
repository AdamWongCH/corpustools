% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shatter_tcorpus.r
\name{shatter_tcorpus}
\alias{shatter_tcorpus}
\title{Shatter a tCorpus to create or append a shattered tCorpus}
\usage{
shatter_tcorpus(tc, stc, meta_columns = NULL, tokens_per_shard = 1e+06,
  if_exists = c("stop", "append", "overwrite"), if_duplicates = c("stop",
  "skip", "rename"), compress = TRUE, verbose = F)
}
\arguments{
\item{tc}{a tCorpus object}

\item{tokens_per_shard}{The number of tokens per shard. This is an approximation, since a tCorpus should not be broken within documents. Also, given the number of shards that is required, tokens will be evently distributed (for instance, if tokens_per_shard is 1,000,000, and there are 1,500,000 tokens, you'll get 2 tokens of 750,000 shards)}

\item{n_shards}{Alternatively, you can specify the number of shards. This is also only an approximation, as the algorithm tries to find equal sized shards that do not break documents}

\item{shard_path}{the path for where to save the shard files. If not specified, the shards will be saved as temporary files. Note that temporary files are not automatically saved if you save the shattered_tCorpus (which only contains the references), so if you intend to save its best to specify a path to store the shards properly. Alternatively, and recommended, you can use save_stk() to save a shattered_tCorpus with its shards}
}
\value{
a shattered_tCorpus object
}
\description{
Shatters a tCorpus into one or more shards (i.e. subsets). Each subset is saved on disk and removed from memory.
The returned shattered_tCorpus object links to these subsets, and can be used as a normal tCorpus object (though with some restrictions).
Where possible, the tCorpus functions will then be performed per shard, and the entire tCorpus does not have to be kept in memory.
Put simply: if you run into memory problems because you have too much data, you'll probably want to shatter it.
}
\details{
See the documentation for \link{shattered_tCorpus} for a more detailed explanation of why you would ever want to shatter your tCorpus.

!! please read the documentation for shard_path if you intend to save the shattered_tCorpus
}

